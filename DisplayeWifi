#include <DHT.h>
#include <WiFi.h>  //bibliotaca WiFi da ESP32

const char* ssid = "LG House";           //nome da rede WiFi
const char* password = "LG19931995";  //senha da rede WiFi

WiFiServer server(80);  //porta do servidor. 80 é a porta padrão

/* For Software serial */
#include <SoftwareSerial.h>
const byte rxPin = 16;  //rx2
const byte txPin = 17;  //tx2
SoftwareSerial mySerial(rxPin, txPin);

static uint8_t DHTPIN = 14;
DHT dht(DHTPIN, DHT11);

unsigned char Buffer[9];

#define temperatura 0x20
unsigned char temp[8] = { 0x5a, 0xa5, 0x05, 0x82, temperatura, 0x00, 0x00, 0x00 };

unsigned long tempoSensor = millis();

#define rele1 13


void setup() {

  Serial.begin(115200);
  mySerial.begin(115200);

  pinMode(rele1, OUTPUT);

  connect_wifi();

  dht.begin();
}

void loop() {

  if ((millis() - tempoSensor) >= 1000) {
    Send_Sensor();
    tempoSensor = millis();
  }

  paginaWeb();
  display();
}

int Send_Sensor() {
  int t = dht.readTemperature();
  temp[6] = highByte(t);
  temp[7] = lowByte(t);
  mySerial.write(temp, 8);
  Serial.println(t);
  return t;
}

void connect_wifi() {
  // Começa com a conexão WiFi

  Serial.println();
  Serial.println();
  Serial.print("Conectando à");
  Serial.println(ssid);

  WiFi.begin(ssid, password);  //inicia a conexão WiFi com o nome e senha da rede que foram fornecidos

  //enquanto ainda não conectou, fica imprimindo "."
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  server.begin();  //após conectar, inicia o servidor

  //definição dos endereços de IP
  IPAddress ip(192, 168, 2, 107);
  IPAddress gateway(192, 168, 2, 1);
  IPAddress subnet(255, 255, 255, 0);

  Serial.print("Use a seguinte URL para acessar: ");
  Serial.print("http://");
  Serial.print(ip);  //IP que digitaremos no Navegador para Acessar
  Serial.println("/");

  WiFi.config(ip, gateway, subnet);  //configura o wifi com base no que passamos
}

void paginaWeb() {
  WiFiClient client = server.available();  // listen for incoming clients

  if (client) {                     // if you get a client,
    Serial.println("New Client.");  // print a message out the serial port
    String currentLine = "";        // make a String to hold incoming data from the client
    while (client.connected()) {    // loop while the client's connected
      if (client.available()) {     // if there's bytes to read from the client,
        char c = client.read();     // read a byte, then
        Serial.write(c);            // print it out the serial monitor
        if (c == '\n') {            // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("<meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">");
            client.println("<meta http-equiv=\"refresh\" content=\"5; http://192.168.2.107\">");
            client.println();

            
            client.println("<center>");
            
            client.println(Send_Sensor());
            client.println("<br>");
            client.println("<a href=\"/bot\"\"><button>RELE</button></a>");
            client.println("<br>");

            client.println("</center>");


            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {  // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }


        if (currentLine.endsWith("GET /bot")) {
          digitalWrite(rele1, !digitalRead(rele1));
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
  }
  delay(10);
}
void display(){

    if (mySerial.available()) {

    Serial.println("Serial ok");
    for (int i = 0; i <= 8; i++)  //this loop will store whole frame in buffer array.
    {
      Buffer[i] = mySerial.read();
    }

    if (Buffer[0] == 0X5A) {

      switch (Buffer[4]) {
        case 0x30:  //for light
          if (Buffer[8] == 1) {
            digitalWrite(rele1, !digitalRead(rele1));
          } else {
            digitalWrite(rele1, !digitalRead(rele1));
          }
          break;
      }
    }
  }

}
